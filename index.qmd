---
title: "Our Glorious King"
subtitle: "Lebron James"
author: 
- "Paul Grajzl"
- "Zack Jesse"
- "Matt Tabet"
abstract: "LeBron's legacy is large on the statsheet, but extends much further than just putting the ball in the basket. Through his greatness, he has broken records, cultivated lifelong friendships through teammates, and made those around him into better players. His over 20 year career has changed fundamentally changed the game of basketball, which is displayed through the evolution of his playstyle."
---


```{r}
#| label: setup
#| include: false

# Improve digit display and NA display for kable tables
options(scipen = 1, knitr.kable.NA = "")

# Load necessary packages
library(tidyverse)
library(knitr)
library(kableExtra)
library(dplyr)
library(tidyverse)
library(knitr)
library(igraph)
library(tidygraph)
library(ggraph)
library(mdsr)

```

```{r}

#| fig-cap: "Image courtesy of shoepalace.com"
#| fig-align: center
#| out-width: 100%
#| fig-link: "https://www.shoepalace.com/blogs/all/the-story-of-lebron-james"

include_graphics("https://i.shgcdn.com/b552e6b1-f338-439a-8c12-1b8610d5895a/-/format/auto/-/preview/3000x3000/-/quality/lighter/")
```

```{r include = FALSE}
Lebron <- read.csv("data/lebron_teammates.csv") |>
  mutate(name = "LeBron James")
Thompson <- read.csv("data/thompson_teammates.csv")
Jefferson <- read.csv("data/jefferson_teammates.csv")
Love <- read.csv("data/love_teammates.csv")
Davis <- read.csv("data/ad_teammates.csv")
Kyrie <- read.csv("data/kyrie_teammates.csv")
Green <- read.csv("data/green_teammates.csv")
Korver <- read.csv("data/korver_teammates.csv")
JR <- read.csv("data/jrsmith_teammates.csv")
Frye <- read.csv("data/frye_teammates.csv")
Anderson <- read.csv("data/Anderson_teammates.csv")
Delly <- read.csv("data/delly_teammates.csv")
Dwayne <- read.csv("data/DWade_teammates.csv")
Sasha <- read.csv("data/Sasha_teammates.csv")
Zydrunas <- read.csv("data/zydrunas_teammates.csv")
Shumpert <- read.csv("data/shumpert_teammates.csv")
Mo <- read.csv("data/mo_teammates.csv")
Johnson <- read.csv("data/JamesJ_teammates.csv")
Bosh <- read.csv("data/Bosh_teammates.csv")
Chalmers <- read.csv("data/chalmers_teammates.csv")

lebron_network <- bind_rows(
  Lebron, Thompson, Jefferson, Love, Davis, Kyrie, Green, Korver,
  JR, Frye, Anderson, Delly, Dwayne, Sasha, Zydrunas, Shumpert, Mo,
  Johnson, Bosh, Chalmers
)

player_names <- c("LeBron James", "Tristan Thompson", "Richard Jefferson", "Kevin Love",
                  "Anthony Davis", "Kyrie Irving", "Danny Green", "Kyle Korver",
                  "JR Smith", "Channing Frye", "Anderson Varejao", "Matthew Dellavedova",
                  "Dwyane Wade", "Sasha Pavlovic", "Zydrunas Ilgauskas", "Iman Shumpert",
                  "Mo Williams", "James Jones", "Chris Bosh", "Mario Chalmers")

edges <- lebron_network |>
  rename(from = name, to = Player, weight = GP) |>
  filter(from %in% player_names & to %in% player_names)

edges <- edges |>
  rowwise() |>
  mutate(player1 = min(from, to),
         player2 = max(from, to)) |>
  group_by(player1, player2) |>
  summarise(weight = sum(weight), .groups = 'drop') |>
  rename(from = player1, to = player2)

lebron_plot <- graph_from_data_frame(edges, directed = FALSE)

```

# Citations, cross-referencing, and linking between pages

## Cross-referencing

You should use code chunk labels and in-text [cross-references for figures and tables](https://quarto.org/docs/authoring/cross-references.html#computations) (see the *Knitr* examples at the link). 

Quarto additionally provides similar syntax for [creating labels for and cross-referencing equations](https://quarto.org/docs/authoring/cross-references.html#equations), [creating labels for and cross-referencing sections](https://quarto.org/docs/authoring/cross-references.html#sections), and using code chunk options of the form `lst-label: lst-your-listing-label` and `lst-cap: Code chunk caption` to be able to cross-reference displayed code chunks (or "listings") using the syntax `@lst-your-listing-label` within the text. 

These are not required for this project but are good practice.


## Creating and linking to subpages

You can create subpages by simply creating new qmd files. Any subpage you want to include on the website should be added to the website navigation list in the `_quarto.yml` file. 

You can [link to another page on the website](another-page.qmd) by using just the filepath to the corresponding qmd file. You can also [link directly to a section of a subpage](yet-another-page.qmd#sec-note). 


## Creating the bibliography

One of the new challenges of Quarto, relative to a Word or Google doc, is learning how to build a bibliography and use the specified citation keys to write in-text citations.

All items you plan to cite should be added to the `library.bib` bibliography file, which *you can open from within RStudio and edit just like any other text file*. You should use standard bibtex syntax for each entry, following the examples provided. If the resource you are using doesn't already provide a way to generate a bibtex entry, I recommend using [zoterobib](https://zbib.org) to generate the appropriate syntax (must change the Bibliography style to "BibTeX generic citation style"). The entries currently in `library.bib` are intended to provide syntax examples that capture the range of entries you are most likely to use. **You will need to delete and replace the contents of `library.bib` with your own citation entries.**

::: {.callout-note}
The examples in `library.bib` are nicely formatted so you can read and follow the patterns, but formatting and order of the `library.bib` file doesn't actually matter and will not be assessed. Just be sure the citations are as complete as possible (authors, titles, dates, urls, dois, etc.).
:::

```markdown
@book{hadley2016,
  author = {Hadley, Wickham}, 
  title = {ggplot2: Elegant Graphics for Data Analysis}, 
  url  = {https://ggplot2-book.org},
  publisher = {Springer},
  address = {New York, NY},
  type = {Online book},
  year = {2016},
  edition = {3}
}
```


## Creating in-text citations

Items you cite in the text will be automatically added to a list of References at the bottom of the corresponding page. To cite a reference in the text, use the corresponding *citation key* (the first item in each bibtex entry---it shouldn't have any spaces or special characters) and format the citation using the appropriate [quarto format for in-text citations](https://quarto.org/docs/authoring/citations.html#sec-citations). This is similar to how we cross-reference tables and figures from code chunk labels. For example, the syntax 

```
@hadley2016 provides excellent examples of customizing our visualizations using **ggplot2**.
``` 

produces the following text:

> @hadley2016 provides excellent examples of customizing our visualizations using **ggplot2**.

And the corresponding reference is listed in full at the bottom of this page. 


# Quarto website features


Below I demonstrate examples for customizing aspects of your webpage. In the `_quarto.yml` file you'll see additional links and information about customizing the website further. 

::: {.callout-warning}
Focus on completing the blog content first! You can play with features and customization *after* you're happy with the contents of the blog.
:::


## Including images or gifs

I would strongly recommend  using **knitr**'s `include_graphics()` functions within code chunks to include images or gifs within your blog. This makes it easier to modify figures, add captions and links, and visually find the code for figures quickly if you need to modify something about the output. There is also [markdown syntax to display or embed images](https://quarto.org/docs/authoring/figures.html), but I would typically not recommend it.

```{r}
#| fig-cap: "Image courtesy of giphy.com"
#| fig-align: center
#| out-width: 100%
#| fig-link: "https://giphy.com/gifs/insecurehbo-3og0IT6sIWd1eh7bJm"

include_graphics("https://i.giphy.com/3og0IT6sIWd1eh7bJm.webp")
```

Either approach will take either a filepath to a stored file or a URL to an image or gif. Width can be specified as a percentage of the width of the page (0% to 100%; my preferred approach) or as a fixed number of units (e.g. 400px, 3in, 10cm). 

I can't imagine a scenario where students should or would include videos within their blog, but Quarto provides [guidance on embedding videos](https://quarto.org/docs/authoring/videos.html), as well.

::: {.callout-note}
The first figure of your blog will be used as the display image on our course's landing page!
:::



## Panel tabsets

Use the following format to add information or tables or visualizations in [tabset panels](https://quarto.org/docs/interactive/layout.html#tabset-panel).

::: {.panel-tabset}

### Tab 1

Some information in one tab 


### Tab 2

Some information in a different tab

:::

## Panel layouts for content

Use the following format to have more control over the [panel layout](https://quarto.org/docs/authoring/figures.html#complex-layouts) of various components. 

The syntax "[ [1], [1,1] ]" indicates that we have three pieces of content that we want to spread across two rows. The first piece of content will be in its own row, and then the next two components will be split across two columns of equal width in a second row. 


::: {layout="[ [1], [1,1] ]"}

### Row 1 with only one output

```{r} 
#| echo: FALSE 
#| fig.width: 20
#| fig.height: 16 
#| warning: FALSE

as_tbl_graph(lebron_plot) |>
ggraph(layout = "linear", circular = TRUE) +
  geom_edge_link(aes(width = weight), alpha = 0.5, color = "lightblue") +
  geom_node_point(size = 12, color = "red") +
  geom_node_text(aes(label = name), repel = TRUE, size = 8, color = "black") +
  theme_void()

```


### First column of row 2

Some other content

### Second column of row 2

Some additional content.

:::

The values provided within each row specify the relative widths of the content within that row. For example "[1,2,1]" would create a row with 3 columns where the first and third columns are the same width and the middle column is twice as wide.


## Layouts for tables and visualizations produced by code chunks

For details on how to layout subfigures from multiple graphs produced by the same code chunk, see the examples in the **Knitr** tabs of the sections on [figure layouts, subcaptions, and custom layouts](https://quarto.org/docs/authoring/figures.html#layout).

The same syntax shown across the linked examples can be used to create subtables by replacing `fig-cap` and `fig-subcap` with `tbl-cap` and `tbl-subcap`. 

Two examples in @tbl-layout and @fig-layout below are borrowed and slightly modified from the linked sections. 

```{r}
#| label: tbl-layout
#| tbl-cap: "Two tables side-by-side"
#| tbl-subcap: 
#|   - "First three rows of cars dataset"
#|   - "First three rows of pressure dataset"
#| layout-ncol: 2

cars |> 
  slice(1:3) |> 
  kable()

pressure |> 
  slice(1:3) |> 
  kable()
```


```{r}
#| label: fig-layout
#| fig-cap: "Three figures in a complex layout"
#| fig-subcap: 
#|   - "cars"
#|   - "pressure"
#|   - "mtcars"
#| layout: [[4, -1, 4], [1]] 

ggplot(cars, aes(speed, dist)) +
  geom_point()

ggplot(pressure, aes(temperature, pressure)) +
  geom_point()

ggplot(mtcars, aes(hp, mpg)) +
  geom_point()
```

